
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace model_parcialmente_agrupadoB_previa_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 27> locations_array__ = 
{" (found before start of program)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 9, column 2 to column 35)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 10, column 2 to column 53)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 11, column 2 to column 18)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 14, column 4 to column 49)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 13, column 17 to line 15, column 3)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 13, column 2 to line 15, column 3)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 17, column 2 to column 34)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 18, column 2 to column 52)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 19, column 2 to column 17)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 22, column 4 to column 46)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 21, column 17 to line 23, column 3)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 21, column 2 to line 23, column 3)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 25, column 2 to column 38)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 27, column 2 to column 16)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 30, column 4 to column 76)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 29, column 17 to line 31, column 3)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 29, column 2 to line 31, column 3)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 3, column 2 to column 17)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 4, column 2 to column 17)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 5, column 8 to column 9)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 5, column 2 to column 40)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 6, column 9 to column 10)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 6, column 2 to column 14)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 11, column 9 to column 10)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 19, column 9 to column 10)",
 " (in '/home/juanpalms/Desktop/MCD/Bayesiana/PROYECTO/modelacion-bayesiana-proyecto-final-bayes-radioactivo/modelos/model_parcialmente_agrupadoB_previa.stan', line 27, column 13 to column 14)"};




class model_parcialmente_agrupadoB_previa_model final : public model_base_crtp<model_parcialmente_agrupadoB_previa_model> {

 private:
  int N;
  int J;
  std::vector<int> county;
  Eigen::Matrix<double, -1, 1> x_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> x{nullptr, 0};
 
 public:
  ~model_parcialmente_agrupadoB_previa_model() { }
  
  inline std::string model_name() const final { return "model_parcialmente_agrupadoB_previa_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  model_parcialmente_agrupadoB_previa_model(stan::io::var_context& context__,
                                            unsigned int random_seed__ = 0,
                                            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model_parcialmente_agrupadoB_previa_model_namespace::model_parcialmente_agrupadoB_previa_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 18;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 18;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 19;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      
      
      current_statement__ = 19;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("county", "N", N);
      current_statement__ = 21;
      context__.validate_dims("data initialization","county","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      county = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 21;
      county = context__.vals_i("county");
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "county", county, 1);
      current_statement__ = 21;
      stan::math::check_less_or_equal(function__, "county", county, J);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("x", "N", N);
      current_statement__ = 23;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      x_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, 1>>(x_data__.data(), N);
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 23;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 23;
          stan::model::assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", stan::model::index_uni(sym1__));
          current_statement__ = 23;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 24;
      stan::math::validate_non_negative_index("alpha", "J", J);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("beta", "J", J);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("y_sim", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_parcialmente_agrupadoB_previa_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model_parcialmente_agrupadoB_previa_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double mu_alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu_alpha = stan::math::normal_rng(1, 1, base_rng__);
      double sigma_alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_alpha = stan::math::fabs(
                      stan::math::normal_rng(0, 1, base_rng__));
      Eigen::Matrix<double, -1, 1> alpha =
         Eigen::Matrix<double, -1, 1>::Constant(J,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 4;
        stan::model::assign(alpha,
          stan::math::normal_rng(mu_alpha, sigma_alpha, base_rng__),
          "assigning variable alpha", stan::model::index_uni(j));
      }
      double mu_beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      mu_beta = stan::math::normal_rng(0, 1, base_rng__);
      double sigma_beta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sigma_beta = stan::math::fabs(stan::math::normal_rng(0, 1, base_rng__));
      Eigen::Matrix<double, -1, 1> beta =
         Eigen::Matrix<double, -1, 1>::Constant(J,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 10;
        stan::model::assign(beta,
          stan::math::normal_rng(mu_beta, sigma_beta, base_rng__),
          "assigning variable beta", stan::model::index_uni(j));
      }
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      sigma = stan::math::fabs(stan::math::normal_rng(0, 1, base_rng__));
      std::vector<double> y_sim =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 15;
        stan::model::assign(y_sim,
          stan::math::normal_rng(
            (stan::model::rvalue(alpha, "alpha",
               stan::model::index_uni(stan::model::rvalue(county, "county",
                                        stan::model::index_uni(i)))) +
              (stan::model::rvalue(beta, "beta",
                 stan::model::index_uni(stan::model::rvalue(county, "county",
                                          stan::model::index_uni(i)))) *
                stan::model::rvalue(x, "x", stan::model::index_uni(i)))),
            sigma, base_rng__),
          "assigning variable y_sim", stan::model::index_uni(i));
      }
      current_statement__ = 2;
      stan::math::check_greater_or_equal(function__, "sigma_alpha",
                                            sigma_alpha, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "sigma_beta",
                                            sigma_beta, 0);
      out__.write(mu_alpha);
      out__.write(sigma_alpha);
      out__.write(alpha);
      out__.write(mu_beta);
      out__.write(sigma_beta);
      out__.write(beta);
      out__.write(sigma);
      out__.write(y_sim);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_alpha", "sigma_alpha", "alpha",
      "mu_beta", "sigma_beta", "beta", "sigma", "y_sim"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(J)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(J)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu_alpha");
      param_names__.emplace_back(std::string() + "sigma_alpha");
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "mu_beta");
      param_names__.emplace_back(std::string() + "sigma_beta");
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_sim" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "mu_alpha");
      param_names__.emplace_back(std::string() + "sigma_alpha");
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "mu_beta");
      param_names__.emplace_back(std::string() + "sigma_beta");
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "sigma");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_sim" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((1 + 1) + J) + 1) + 1) + J) + 1) + N);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((((((1 + 1) + J) + 1) + 1) + J) + 1) + N);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}

using stan_model = model_parcialmente_agrupadoB_previa_model_namespace::model_parcialmente_agrupadoB_previa_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model_parcialmente_agrupadoB_previa_model_namespace::profiles__;
}

#endif


